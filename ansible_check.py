import subprocess
import os
import shutil
import json


def ansible_main(repo_dir, repo_id):
    """
    Performs the check for Ansible files in the provided repository. For that, it uses the ansible library 'ansible-content-parser'
    which, if the parsing works correctly, it provides a file with a report in which the sucessfully parsed files are provided. Therefore,
    the logic of this function takes as Ansible positive the existence of the report file, negative otherwise.

    :param repo_dir: The path to the cloned repository
    :param repo_id: The full name of the cloned repository for help functions
    :return: boolean: Indicates whether evidence on Ansible was found or not.
    """

    cwd = os.getcwd()
    ansible_out_path = os.path.join(cwd, 'ansible-outputs-draft')
    if not os.path.exists(ansible_out_path):
        os.mkdir(ansible_out_path)
    res = subprocess.run(["ansible-content-parser", repo_dir, os.path.join(ansible_out_path, repo_id)], capture_output=True, text=True)
    print(f"> Ansible parsing output for repo {repo_id}: {res.stdout}, return code: {res.returncode}")

    # 1. Check if there's important output in the ansible analysis report. Which is given in the report.txt file generated by the parser.
    flag_report = False
    for root, dirs, files in os.walk(os.path.join(ansible_out_path, repo_id)):
        for file in files:
            if file == "report.txt":
                flag_report = True
                break

    # 2. Check if there's metadata from the analysis has been generated.
    flag_metadata = False
    for root, dirs, files in os.walk(os.path.join(ansible_out_path, repo_id)):
        for file in files:
            if file == "sage-metadata.json":
                flag_metadata = True
                break

    flag_playbook = False
    if flag_metadata:
        report_path = os.path.join(ansible_out_path, repo_id, "metadata")
        metadata_json = json.load(open(os.path.join(report_path, "sage-metadata.json"), mode="r"))
        num_playbooks = metadata_json["objects"]["playbooks"]
        if num_playbooks > 0:
            flag_playbook = True

    playbook_file_paths = []
    # 3. Get the paths from the playbook files
    if flag_playbook:
        report_path = os.path.join(ansible_out_path, repo_id, "metadata")

        with open(os.path.join(report_path, "file_inventory.json"), 'r') as json_file:
            json_list = list(json_file)

        for json_file in json_list:

            json_line = json.loads(json_file)
            file_label = json_line["label"]
            if file_label == "playbook":
                playbook_file_paths.append(json_line["filepath"])

    # shutil.rmtree(os.path.join(ansible_out_path, repo_id))  # We remove the existing repository analysis from the machine as it clones the project back, thus taking lots of space.
    if flag_report and flag_metadata and flag_playbook:  # We found a software project which gets properly parsed through the ansible-content-parser
        print(f"> Ansible parsing output FOUND for repo {repo_id}")
        return 1, playbook_file_paths
    else:
        return 0, playbook_file_paths


